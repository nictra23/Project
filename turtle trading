Intuition 
Turtle Trading primarily uses a trend-following approach. Trend-following strategies are, as the name suggests, designed to take advantage of price movements in one direction. In general, we are using the past 20-55 days' historical data to predict the expected moving range of stocks. If the stock is outperforming, which is moving to exceed the upper bound of the moving range, we take this phenomenon as a sign to long the stock. Conversely, if the stock is "underperforming" after we bought in, we sell
the stock. In the same breath, it's essential to set up the trigger of exit--Stop Loss Rules: Once we have lost 20% of the money, we would exit the entire position.  Personally, this trading strategy works better when the market moves dramatically, otherwise, it's not easy to break the upper and lower bound of the Donchian channel. 

Here's an intuitive breakdown of the algorithm:

1. Identify the Market to Trade:

Turtle trading was originally applied to a broad range of commodities, currencies, and bond markets. It's critical to diversify across different types of instruments to increase the chances of catching a trend.

2. Set Up Units:

A unit is a predefined amount of capital that you're willing to risk on each trade. The Turtles used a volatility-based constant pre-determined risk approach to size their positions. They used the Average True Range (ATR), a measure of volatility, to define the size of a unit.



3. Entry Rules:

The Turtles were taught two breakout variants or "systems". System one (S1) used a 20-day price breakout for entry. If the price exceeded the highest high of the previous 20 days, that's a buy signal. (2) Increase position: If the stock price has increased by 0.5N on the basis of the last purchase (or increase position), increase the position by 1 Unit; System two (S2) used a longer 55-day breakout. If the price drops below the low of the last 20 or 55 days (for S1 and S2 respectively), that's a sell signal.

4. Add-On Trades:

The Turtles were taught to 'pyramid' or add to their positions. They could add more units to their original position as the price moved in their favor. After adding a unit, the stop-loss would be adjusted to account for the new units.

5. Exit Rules:

For exits, the Turtles would exit their position when the price breaks the minimum of the past 10 days for S1, or the past 20 days for S2. This strategy is designed to allow the trader to ride the trend for as long as possible.

6. Stop Loss Rules:

The Turtles always used a stop-loss order. If a market moved against them by a certain predefined amount (2% of their account), they would exit the entire position.

7. Portfolio Risk Management:
The Turtles were trained to manage their portfolio risk with strict rules of diversification. The risk of any single market would not exceed 4 units. The risk in one direction (long or short) would not exceed 12 units. And the maximum total portfolio risk would not exceed 20 units.(Investopedia)


	

Related References and Links
	

1).TrueRange:
TrueRange=Maximum(H−L,H−PDC,PDC−L)
In the formula, True Range represents the volatility within a day, H is the highest price of the day, L is the lowest price of the day, and PDC is the closing price of the previous day.
2). N:
N=(19*PDC+TR)/20
In the formula, TR is True Range, that is, the fluctuation amount within a day, and PDN is the N value of the previous day. The real meaning of this formula is to calculate the average value of N in the previous 20 days (including today)

3). Dollar Volatility:

DollarVolatility=N∗DollarsPerPoint
In the formula, Dollar Volatility refers to the fluctuating price, and Dollars per Point refers to the total price change of 1 lot of stock every time the underlying stock fluctuates by one minimum unit. The minimum amount of change in the country is 0.01, and 1 lot is 100 shares. So Dollars per Point is 0.01×100=1

4).Unit:
unit=1% of account/DV
The meaning of this formula is that under normal circumstances (when the market volatility is not large), if you buy 1 Unit of assets, the amplitude of the day will make the change of the total assets not exceed 1%


www.investopedia.com
https://www.joinquant.com/view/community/detail/b061c8738b509ec318c03e7af040bb9b

code:
# Things to do before running the overall backtest
def initialize(context):
    set_params()        # 1 Set strategy parameters
    set_variables()     # 2 Set intermediate variables
    set_backtest()      # 3 Set backtest conditions

# 1. Setting Strategy Parameters
def set_params():
    g.security = '000063.XSHE'  # The stock to trade
    g.short_in_date = 20  # Trailing date for System 1 to enter the market
    g.long_in_date = 55  # Trailing date for System 2 to enter the market
    g.short_out_date = 10  # Trailing date for System 1 to exit the market
    g.long_out_date = 20  # Trailing date for System 2 to exit the market
    g.dollars_per_share = 1  # The total price change per share per unit fluctuation (in domestic markets, this is 0.01 * 100)
    g.loss = 0.1  # Maximum tolerable loss rate
    g.adjust = 0.8  # Adjustment rate if loss exceeds maximum tolerable loss
    g.number_days = 20  # Number of days to calculate N value
    g.unit_limit = 4  # Maximum allowable trading units
    g.ratio = 0.8  # Proportion of funds allocated to System 1

# 2. Setting Intermediate Variables
def set_variables():
    g.unit = 1000  # Initial trading unit
    g.N = []  # A list to store N values
    g.days = 0  # Record the number of days for this trading system
    g.break_price1 = 0  # Breakout price for System 1
    g.break_price2 = 0  # Breakout price for System 2
    g.sys1 = 0  # Number of units in System 1
    g.sys2 = 0  # Number of units in System 2
    g.system1 = True  # Flag to indicate whether to execute System 1 and not System 2

# 3. Setting Backtest Conditions
def set_backtest():
    set_benchmark(g.security)  # Setting the benchmark for evaluating the strategy
    set_option('use_real_price', True)  # Use real trading prices
    log.set_level('order', 'error')  # Set the logging error level

================================================================================
Before market opens every day
================================================================================
'''
# Things to do before the market opens every day
def before_trading_start(context):
    set_slip_fee(context) 

# 4. Set slippage and commission based on different time periods
def set_slip_fee(context):
    # Set the slippage to 0
    set_slippage(FixedSlippage(0)) 
    
    # Set the commission based on the date
    dt = context.current_dt
    
    # If the date is after January 1, 2013
    if dt > datetime.datetime(2013, 1, 1):
        set_commission(PerTrade(buy_cost=0.0003, sell_cost=0.0013, min_cost=5)) 
        
    # If the date is after January 1, 2011
    elif dt > datetime.datetime(2011, 1, 1):
        set_commission(PerTrade(buy_cost=0.001, sell_cost=0.002, min_cost=5))
            
    # If the date is after January 1, 2009
    elif dt > datetime.datetime(2009, 1, 1):
        set_commission(PerTrade(buy_cost=0.002, sell_cost=0.003, min_cost=5))
                
    # If the date is before January 1, 2009
    else:
        set_commission(PerTrade(buy_cost=0.003, sell_cost=0.004, min_cost=5))

'''
================================================================================
During trading hours
================================================================================
'''
# Backtest on a minute-by-minute basis
def handle_data(context, data):
    dt = context.current_dt  # Current date and time
    current_price = data[g.security].price  # Current price
    
    if dt.hour == 9 and dt.minute == 30:
        g.days += 1
        calculate_volatility()  # Calculate the volatility (N)
    
    if g.days > g.number_days:
        # Current value of stocks and cash held
        value = context.portfolio.portfolio_value
        # Available cash
        cash = context.portfolio.cash 
        
        if g.sys1 == 0 and g.sys2 == 0:
            # Adjust (decrease) available cash and total value if the loss rate exceeds g.loss
            if value < (1 - g.loss) * context.portfolio.starting_cash:
                cash *= g.adjust
                value *= g.adjust
                
        # Calculate the price movement in terms of dollars
        dollar_volatility = g.dollars_per_share * (g.N)[-1]
        # Calculate the number of shares to buy or sell based on this strategy
        g.unit = value * 0.01 / dollar_volatility

        # Operations for System 1
        g.system1 = True
        if g.sys1 == 0:
            enter_market(current_price, g.ratio * cash, g.short_entry_period)
        else:
            apply_stop_loss(current_price)
            add_to_position(current_price, g.ratio * cash, g.short_entry_period)    
            exit_position(current_price, g.short_exit_period)

        # Operations for System 2
        g.system1 = False
        if g.sys2 == 0:
            enter_market(current_price, (1 - g.ratio) * cash, g.long_entry_period)
        else:
            apply_stop_loss(current_price)
            add_to_position(current_price, (1 - g.ratio) * cash, g.long_entry_period)
            exit_position(current_price, g.long_exit_period)   

# 5
# Calculate the current volatility value (N)
def calculate_volatility():
    # If trading for 20 days or fewer
    if g.days <= g.number_days:
        price = get_price_history(g.security, g.days, '1d', ('high', 'low', 'previous_close'))
        lst = []
        
        for i in range(0, g.days):
            h_l = price['high'][i] - price['low'][i]
            h_c = price['high'][i] - price['previous_close'][i]
            c_l = price['previous_close'][i] - price['low'][i]
            
            # Calculate the True Range
            True_Range = max(h_l, h_c, c_l)
            lst.append(True_Range)
        
        # Calculate the average True Range for the past 'g.days' days
        current_N = np.mean(np.array(lst))
        (g.N).append(current_N)
        
    # If trading for more than 20 days
    else:
        price = get_price_history(g.security, 1, '1d', ('high', 'low', 'previous_close'))
        
        h_l = price['high'][0] - price['low'][0]
        h_c = price['high'][0] - price['previous_close'][0]
        c_l = price['previous_close'][0] - price['low'][0]
        
        # Calculate the True Range
        True_Range = max(h_l, h_c, c_l)
        # Update the value of N using an exponential moving average
        current_N = (True_Range + (g.number_days - 1) * (g.N)[-1]) / g.number_days
        (g.N).append(current_N)
# 6
# Entry function to decide whether System 1 or System 2 should enter the market and update their breakout prices
def market_in(current_price, cash, in_date):
    # Retrieve the closing prices for the past "in_date" days
    price = attribute_history(g.security, in_date, '1d', ('close'))
    
    # Enter the market if the current price is higher than the highest closing price in the past "in_date" days
    if current_price > max(price['close']):
        # Calculate the number of shares that can be bought
        num_of_shares = cash / current_price
        
        if num_of_shares >= g.unit:
            print("Buy")
            print(current_price)
            print(max(price['close']))
            
            if g.system1:
                if g.sys1 < int(g.unit_limit * g.unit):
                    order(g.security, int(g.unit))
                    g.sys1 += int(g.unit)
                    g.break_price1 = current_price
            else:
                if g.sys2 < int(g.unit_limit * g.unit):
                    order(g.security, int(g.unit))
                    g.sys2 += int(g.unit)
                    g.break_price2 = current_price

# 7
# Function to add to an existing position
def market_add(current_price, cash, in_date):
    break_price = g.break_price1 if g.system1 else g.break_price2
    
    # Add to position when the price rises by 0.5N
    if current_price >= (break_price + 0.5 * (g.N)[-1]):
        num_of_shares = cash / current_price
        
        if num_of_shares >= g.unit:
            print("Add to Position")
            print(g.sys1)
            print(g.sys2)
            print(current_price)
            print(break_price + 0.5 * (g.N)[-1])
            
            if g.system1:
                if g.sys1 < int(g.unit_limit * g.unit):
                    order(g.security, int(g.unit))
                    g.sys1 += int(g.unit)
                    g.break_price1 = current_price
            else:
                if g.sys2 < int(g.unit_limit * g.unit):
                    order(g.security, int(g.unit))
                    g.sys2 += int(g.unit)
                    g.break_price2 = current_price

# 8
# Function to exit the market
def market_out(current_price, out_date):
    price = attribute_history(g.security, out_date, '1d', ('close'))
    
    # Exit the market if the current price is lower than the lowest closing price in the past "out_date" days
    if current_price < min(price['close']):
        print("Exit")
        print(current_price)
        print(min(price['close']))
        
        if g.system1:
            if g.sys1 > 0:
                order(g.security, -g.sys1)
                g.sys1 = 0
        else:
            if g.sys2 > 0:
                order(g.security, -g.sys2)
                g.sys2 = 0

# 9
# Stop loss function
def stop_loss(current_price):
    break_price = g.break_price1 if g.system1 else g.break_price2
    
    # Exit the market if the price has decreased by 2N
    if current_price < (break_price - 2 * (g.N)[-1]):
        print("Stop Loss")
        print(current_price)
        print(break_price - 2 * (g.N)[-1])
        
        if g.system1:
            order(g.security, -g.sys1)
            g.sys1 = 0
        else:
            order(g.security, -g.sys2)
            g.sys2 = 0

'''
================================================================================
After market closes
================================================================================
'''
# Things to do after the market closes every day (nothing required in this strategy)
def after_trading_end(context):
    return

	

